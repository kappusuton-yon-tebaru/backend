// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package backend

import (
	"github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/build"
	"github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/dockerhub"
	"github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/ecr"
	"github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/greeting"
	image2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/image"
	job2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/job"
	"github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/monitoring"
	permission2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/permission"
	projectenv2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/projectenv"
	projectrepository2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/projectrepository"
	regproviders2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/regproviders"
	resource2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/resource"
	resourcerelationship2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/resourcerelationship"
	"github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/reverseproxy"
	role2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/role"
	rolepermission2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/rolepermission"
	roleusergroup2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/roleusergroup"
	svcdeploy2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/svcdeploy"
	svcdeployenv2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/svcdeployenv"
	user2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/user"
	usergroup2 "github.com/kappusuton-yon-tebaru/backend/cmd/backend/internal/usergroup"
	"github.com/kappusuton-yon-tebaru/backend/internal/config"
	"github.com/kappusuton-yon-tebaru/backend/internal/image"
	"github.com/kappusuton-yon-tebaru/backend/internal/job"
	"github.com/kappusuton-yon-tebaru/backend/internal/logger"
	"github.com/kappusuton-yon-tebaru/backend/internal/mongodb"
	"github.com/kappusuton-yon-tebaru/backend/internal/permission"
	"github.com/kappusuton-yon-tebaru/backend/internal/projectenv"
	"github.com/kappusuton-yon-tebaru/backend/internal/projectrepository"
	"github.com/kappusuton-yon-tebaru/backend/internal/regproviders"
	"github.com/kappusuton-yon-tebaru/backend/internal/resource"
	"github.com/kappusuton-yon-tebaru/backend/internal/resourcerelationship"
	"github.com/kappusuton-yon-tebaru/backend/internal/rmq"
	"github.com/kappusuton-yon-tebaru/backend/internal/role"
	"github.com/kappusuton-yon-tebaru/backend/internal/rolepermission"
	"github.com/kappusuton-yon-tebaru/backend/internal/roleusergroup"
	"github.com/kappusuton-yon-tebaru/backend/internal/svcdeploy"
	"github.com/kappusuton-yon-tebaru/backend/internal/svcdeployenv"
	"github.com/kappusuton-yon-tebaru/backend/internal/user"
	"github.com/kappusuton-yon-tebaru/backend/internal/usergroup"
	"github.com/kappusuton-yon-tebaru/backend/internal/validator"
	"go.mongodb.org/mongo-driver/v2/mongo"
)

// Injectors from wire.go:

func Initialize() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	loggerLogger, err := logger.New(configConfig)
	if err != nil {
		return nil, err
	}
	handler := greeting.New()
	database, err := mongodb.NewMongoDB(configConfig)
	if err != nil {
		return nil, err
	}
	repository := image.NewRepository(database)
	service := image.NewService(repository)
	imageHandler := image2.NewHandler(service)
	svcdeployRepository := svcdeploy.NewRepository(database)
	svcdeployService := svcdeploy.NewService(svcdeployRepository)
	svcdeployHandler := svcdeploy2.NewHandler(svcdeployService)
	svcdeployenvRepository := svcdeployenv.NewRepository(database)
	svcdeployenvService := svcdeployenv.NewService(svcdeployenvRepository)
	svcdeployenvHandler := svcdeployenv2.NewHandler(svcdeployenvService)
	userRepository := user.NewRepository(database)
	userService := user.NewService(userRepository)
	userHandler := user2.NewHandler(userService)
	usergroupRepository := usergroup.NewRepository(database)
	usergroupService := usergroup.NewService(usergroupRepository)
	usergroupHandler := usergroup2.NewHandler(usergroupService)
	resourceRepository := resource.NewRepository(database)
	resourceService := resource.NewService(resourceRepository)
	resourceHandler := resource2.NewHandler(resourceService)
	roleRepository := role.NewRepository(database)
	roleService := role.NewService(roleRepository)
	roleHandler := role2.NewHandler(roleService)
	permissionRepository := permission.NewRepository(database)
	permissionService := permission.NewService(permissionRepository)
	permissionHandler := permission2.NewHandler(permissionService)
	rolepermissionRepository := rolepermission.NewRepository(database)
	rolepermissionService := rolepermission.NewService(rolepermissionRepository)
	rolepermissionHandler := rolepermission2.NewHandler(rolepermissionService)
	roleusergroupRepository := roleusergroup.NewRepository(database)
	roleusergroupService := roleusergroup.NewService(roleusergroupRepository)
	roleusergroupHandler := roleusergroup2.NewHandler(roleusergroupService)
	projectrepositoryRepository := projectrepository.NewRepository(database)
	projectrepositoryService := projectrepository.NewService(projectrepositoryRepository)
	projectrepositoryHandler := projectrepository2.NewHandler(projectrepositoryService)
	resourcerelationshipRepository := resourcerelationship.NewRepository(database)
	resourcerelationshipService := resourcerelationship.NewService(resourcerelationshipRepository)
	resourcerelationshipHandler := resourcerelationship2.NewHandler(resourcerelationshipService)
	jobRepository := job.NewRepository(database)
	jobService := job.NewService(jobRepository)
	jobHandler := job2.NewHandler(jobService)
	regprovidersRepository := regproviders.NewRepository(database)
	regprovidersService := regproviders.NewService(regprovidersRepository)
	regprovidersHandler := regproviders2.NewHandler(regprovidersService)
	projectenvRepository := projectenv.NewRepository(database)
	projectenvService := projectenv.NewService(projectenvRepository)
	projectenvHandler := projectenv2.NewHandler(projectenvService)
	ecrRepository := ecr.NewECRRepository(configConfig)
	ecrService := ecr.NewService(ecrRepository)
	ecrHandler := ecr.NewHandler(ecrService)
	dockerHubRepository := dockerhub.NewDockerHubRepository(configConfig)
	dockerhubService := dockerhub.NewService(dockerHubRepository)
	dockerhubHandler := dockerhub.NewHandler(dockerhubService)
	validatorValidator, err := validator.New()
	if err != nil {
		return nil, err
	}
	builderRmq, err := rmq.New(configConfig)
	if err != nil {
		return nil, err
	}
	buildService := build.NewService(builderRmq, jobService, loggerLogger, projectrepositoryService)
	buildHandler := build.NewHandler(validatorValidator, buildService)
	monitoringHandler := monitoring.NewHandler(loggerLogger)
	reverseProxy, err := reverseproxy.New(configConfig)
	if err != nil {
		return nil, err
	}
	app := New(loggerLogger, configConfig, handler, database, imageHandler, svcdeployHandler, svcdeployenvHandler, userHandler, usergroupHandler, resourceHandler, roleHandler, permissionHandler, rolepermissionHandler, roleusergroupHandler, projectrepositoryHandler, resourcerelationshipHandler, jobHandler, regprovidersHandler, projectenvHandler, ecrHandler, dockerhubHandler, buildHandler, monitoringHandler, reverseProxy)
	return app, nil
}

// wire.go:

type App struct {
	Logger                      *logger.Logger
	Config                      *config.Config
	GreetingHandler             *greeting.Handler
	MongoDatabase               *mongo.Database
	ImageHandler                *image2.Handler
	ServiceDeployment           *svcdeploy2.Handler
	ServiceDeploymentEnv        *svcdeployenv2.Handler
	UserHandler                 *user2.Handler
	UserGroupHandler            *usergroup2.Handler
	ResourceHandler             *resource2.Handler
	RoleHandler                 *role2.Handler
	PermissionHandler           *permission2.Handler
	RolePermissionHandler       *rolepermission2.Handler
	RoleUserGroupHandler        *roleusergroup2.Handler
	ProjectRepositoryHandler    *projectrepository2.Handler
	ResourceRelationshipHandler *resourcerelationship2.Handler
	JobHandler                  *job2.Handler
	RegisterProviderHandler     *regproviders2.Handler
	ProjectEnvironmentHandler   *projectenv2.Handler
	ECRHandler                  *ecr.Handler
	DockerHubHandler            *dockerhub.Handler
	BuildHandler                *build.Handler
	MonitoringHandler           *monitoring.Handler
	ReverseProxyHandler         *reverseproxy.ReverseProxy
}

func New(
	Logger *logger.Logger,
	Config *config.Config,
	GreetingHandler *greeting.Handler,
	MongoDatabase *mongo.Database,
	ImageHandler *image2.Handler,
	ServiceDeployment *svcdeploy2.Handler,
	ServiceDeploymentEnv *svcdeployenv2.Handler,
	UserHandler *user2.Handler,
	UserGroupHandler *usergroup2.Handler,
	ResourceHandler *resource2.Handler,
	RoleHandler *role2.Handler,
	PermissionHandler *permission2.Handler,
	RolePermissionHandler *rolepermission2.Handler,
	RoleUserGroupHandler *roleusergroup2.Handler,
	ProjectRepositoryHandler *projectrepository2.Handler,
	ResourceRelationshipHandler *resourcerelationship2.Handler,
	JobHandler *job2.Handler,
	RegisterProviderHandler *regproviders2.Handler,
	ProjectEnvironmentHandler *projectenv2.Handler,
	ECRHandler *ecr.Handler,
	DockerHubHandler *dockerhub.Handler,
	BuildHandler *build.Handler,
	MonitoringHandler *monitoring.Handler,
	ReverseProxyHandler *reverseproxy.ReverseProxy,
) *App {
	return &App{
		Logger,
		Config,
		GreetingHandler,
		MongoDatabase,
		ImageHandler,
		ServiceDeployment,
		ServiceDeploymentEnv,
		UserHandler,
		UserGroupHandler,
		ResourceHandler,
		RoleHandler,
		PermissionHandler,
		RolePermissionHandler,
		RoleUserGroupHandler,
		ProjectRepositoryHandler,
		ResourceRelationshipHandler,
		JobHandler,
		RegisterProviderHandler,
		ProjectEnvironmentHandler,
		ECRHandler,
		DockerHubHandler,
		BuildHandler,
		MonitoringHandler,
		ReverseProxyHandler,
	}
}
