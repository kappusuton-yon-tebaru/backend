// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package sidecarlogger

import (
	"github.com/kappusuton-yon-tebaru/backend/internal/config"
	"github.com/kappusuton-yon-tebaru/backend/internal/kubernetes"
	"github.com/kappusuton-yon-tebaru/backend/internal/logger"
	"github.com/kappusuton-yon-tebaru/backend/internal/logging"
	"github.com/kappusuton-yon-tebaru/backend/internal/mongodb"
	"go.mongodb.org/mongo-driver/v2/mongo"
)

// Injectors from wire.go:

func Initialize() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	loggerLogger, err := logger.New(configConfig)
	if err != nil {
		return nil, err
	}
	kubernetesKubernetes, err := kubernetes.New(configConfig)
	if err != nil {
		return nil, err
	}
	database, err := mongodb.NewMongoDB(configConfig)
	if err != nil {
		return nil, err
	}
	repository := logging.NewRepository(database)
	service := logging.NewService(repository)
	app := New(loggerLogger, configConfig, kubernetesKubernetes, database, service)
	return app, nil
}

// wire.go:

type App struct {
	Logger        *logger.Logger
	Config        *config.Config
	KubeClient    *kubernetes.Kubernetes
	MongoDatabase *mongo.Database
	LogService    *logging.Service
}

func New(
	Logger *logger.Logger,
	Config *config.Config,
	KubeClient *kubernetes.Kubernetes,
	MongoDatabase *mongo.Database,
	LogService *logging.Service,
) *App {
	return &App{
		Logger,
		Config,
		KubeClient,
		MongoDatabase,
		LogService,
	}
}
