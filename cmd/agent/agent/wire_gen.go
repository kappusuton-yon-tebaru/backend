// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package agent

import (
	"github.com/kappusuton-yon-tebaru/backend/cmd/agent/internal/deploy"
	deployenv2 "github.com/kappusuton-yon-tebaru/backend/cmd/agent/internal/deployenv"
	"github.com/kappusuton-yon-tebaru/backend/cmd/agent/internal/setting"
	"github.com/kappusuton-yon-tebaru/backend/internal/config"
	"github.com/kappusuton-yon-tebaru/backend/internal/deployenv"
	"github.com/kappusuton-yon-tebaru/backend/internal/kubernetes"
	"github.com/kappusuton-yon-tebaru/backend/internal/logger"
	"github.com/kappusuton-yon-tebaru/backend/internal/mongodb"
	"github.com/kappusuton-yon-tebaru/backend/internal/resource"
	"github.com/kappusuton-yon-tebaru/backend/internal/resourcerelationship"
	"github.com/kappusuton-yon-tebaru/backend/internal/role"
	"github.com/kappusuton-yon-tebaru/backend/internal/user"
	"github.com/kappusuton-yon-tebaru/backend/internal/validator"
)

// Injectors from wire.go:

func Initialize() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	loggerLogger, err := logger.New(configConfig)
	if err != nil {
		return nil, err
	}
	kubernetesKubernetes, err := kubernetes.New(configConfig)
	if err != nil {
		return nil, err
	}
	service := setting.NewService(configConfig, kubernetesKubernetes, loggerLogger)
	validatorValidator, err := validator.New()
	if err != nil {
		return nil, err
	}
	handler := setting.NewHandler(service, validatorValidator)
	database, err := mongodb.NewMongoDB(configConfig)
	if err != nil {
		return nil, err
	}
	repository := resource.NewRepository(database)
	resourcerelationshipRepository := resourcerelationship.NewRepository(database)
	roleRepository := role.NewRepository(database)
	userRepository, err := user.NewRepository(database)
	if err != nil {
		return nil, err
	}
	resourceService := resource.NewService(repository, resourcerelationshipRepository, roleRepository, userRepository)
	deployenvService := deployenv.NewService(kubernetesKubernetes, resourceService, loggerLogger)
	deployService := deploy.NewService(kubernetesKubernetes, resourceService)
	deployHandler := deploy.NewHandler(deployenvService, deployService, validatorValidator)
	deployenvHandler := deployenv2.NewHandler(deployenvService, validatorValidator)
	app := New(loggerLogger, configConfig, handler, deployHandler, deployenvHandler)
	return app, nil
}

// wire.go:

type App struct {
	Logger           *logger.Logger
	Config           *config.Config
	SettingHandler   *setting.Handler
	DeployHandler    *deploy.Handler
	DeployEnvHandler *deployenv2.Handler
}

func New(
	Logger *logger.Logger,
	Config *config.Config,
	SettingHandler *setting.Handler,
	DeployHandler *deploy.Handler,
	DeployEnvHandler *deployenv2.Handler,
) *App {
	return &App{
		Logger,
		Config,
		SettingHandler,
		DeployHandler,
		DeployEnvHandler,
	}
}
