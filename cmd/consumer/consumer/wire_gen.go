// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package builderconsumer

import (
	"github.com/kappusuton-yon-tebaru/backend/cmd/consumer/internal/build"
	"github.com/kappusuton-yon-tebaru/backend/internal/config"
	"github.com/kappusuton-yon-tebaru/backend/internal/job"
	"github.com/kappusuton-yon-tebaru/backend/internal/kubernetes"
	"github.com/kappusuton-yon-tebaru/backend/internal/logger"
	"github.com/kappusuton-yon-tebaru/backend/internal/mongodb"
	"github.com/kappusuton-yon-tebaru/backend/internal/rmq"
)

// Injectors from wire.go:

func Initialize() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	loggerLogger, err := logger.New(configConfig)
	if err != nil {
		return nil, err
	}
	kubernetesKubernetes, err := kubernetes.New(configConfig)
	if err != nil {
		return nil, err
	}
	builderRmq, err := rmq.New(configConfig)
	if err != nil {
		return nil, err
	}
	database, err := mongodb.NewMongoDB(configConfig)
	if err != nil {
		return nil, err
	}
	repository := job.NewRepository(database)
	service := job.NewService(repository)
	buildService := build.NewService(configConfig, kubernetesKubernetes, loggerLogger, service)
	handler := build.NewHandler(loggerLogger, buildService)
	app := New(loggerLogger, configConfig, kubernetesKubernetes, builderRmq, handler)
	return app, nil
}

// wire.go:

type App struct {
	Logger       *logger.Logger
	Config       *config.Config
	KubeClient   *kubernetes.Kubernetes
	RmqClient    *rmq.BuilderRmq
	BuildHandler *build.Handler
}

func New(
	Logger *logger.Logger,
	Config *config.Config,
	KubeClient *kubernetes.Kubernetes,
	RmqClient *rmq.BuilderRmq,
	BuildHandler *build.Handler,
) *App {
	return &App{
		Logger,
		Config,
		KubeClient,
		RmqClient,
		BuildHandler,
	}
}
